// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          Role      @default(VOLUNTEER)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  organization  Organization?
  volunteer     Volunteer?
  sponsor       Sponsor?
  notifications Notification[]
  messages      Message[] @relation("SentMessages")
  received      Message[] @relation("ReceivedMessages")
}

model Profile {
  id          String   @id @default(cuid())
  bio         String?
  location    String?
  skills      String[]
  interests   String[]
  languages   String[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Organization {
  id          String    @id @default(cuid())
  name        String
  description String
  logo        String?
  website     String?
  location    String
  verified    Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Volunteer {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  applications Application[]
  hours       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Sponsor {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  donations   Donation[]
  totalDonated Float    @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Project {
  id            String    @id @default(cuid())
  title         String
  description   String
  cause         Cause
  location      String
  startDate     DateTime
  endDate       DateTime?
  status        Status    @default(ACTIVE)
  goal          Float
  raised        Float     @default(0)
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  applications  Application[]
  donations     Donation[]
  updates       Update[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Application {
  id          String    @id @default(cuid())
  status      AppStatus @default(PENDING)
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id])
  volunteerId String
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Donation {
  id          String    @id @default(cuid())
  amount      Float
  sponsor     Sponsor   @relation(fields: [sponsorId], references: [id])
  sponsorId   String
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Update {
  id          String    @id @default(cuid())
  title       String
  content     String
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Notification {
  id          String    @id @default(cuid())
  type        NotifType
  content     String
  read        Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id          String    @id @default(cuid())
  content     String
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  receiver    User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId  String
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  VOLUNTEER
  SPONSOR
  ORGANIZATION
  ADMIN
}

enum Cause {
  EDUCATION
  HEALTH
  ENVIRONMENT
  POVERTY
  ANIMALS
  REFUGEE_AID
  OTHER
}

enum Status {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum AppStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum NotifType {
  APPLICATION_UPDATE
  DONATION_RECEIVED
  PROJECT_UPDATE
  MESSAGE
}
